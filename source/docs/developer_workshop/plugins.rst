.. comment out this Section (by putting '|updatedisclaimer|' on top) if file is not uptodate with release

.. _dev_shop_plugin:

*****************************
Workshop - Plugin Development
*****************************

.. contents::
   :local:
   :backlinks: top

C++ Plugins
===========

See https://github.com/qgis/QGIS-Code-Examples

Specifically, the plugin_writer_workshop_

.. _plugin_writer_workshop:
   https://github.com/qgis/QGIS-Code-Examples/tree/master/plugin_writer_workshop

.. warning::

   Examples in the ``QGIS-Code-Examples`` repository are likely to need some
   work to get to function with latest master.

Since the addition of Python binding support to |qg|, development of core C++
plugins has slowed. If you are looking for more powerful tools and control over
memory, etc. like C++ can provide, then a C++ plugin is a very good option.

To get started with a C++ plugin, run :file:`plugin_builder.py`.
::

  cd <path/to/qgis/repo/>src/plugins
  python plugin_builder.py

Once the plugin skeleton is generated, and the plugin coded, you will initially
need to compile it along with |qg|. If you are only editing the plugin, you can
follow up by running ``make`` on the CMake-generated target, e.g.::

  make clevertoolplugin

Then, run |qg| from the build directory to see the changes to your plugin.

Example interactive Terminal session with :file:`plugin_builder.py`::

  Checking that we are in the <qgis dir>/src/plugins/ directory.... yes
  Enter the directory name under qgis/src/plugins/ where your new plugin will be created.
  We suggest using a lowercase underscore separated name e.g. clever_plugin
  Directory for the new plugin: clever_plugin

  Enter the name that will be used when creating the plugin library.
  The name should be entered as a mixed case name with no spaces. e.g. CleverTool
  The plugin name will be used in the following ways:
  1) it will be 'lower cased' and used as the root of the generated lib name
     e.g. libqgis_plugin_clevertool
  2) in its upper cased form it will be used as the basis for class names, in particular
     CleverToolGuiBase <- The base class for the plugins configuration dialog / gui generated by uic
     CleverToolGui     <- The concrete class for the plugins configuration dialog
  3) CleverTool     <- The class that includes the plugin loader instructions and
                       and calls to your custom application logic
  4) clevertool.h, clevertool.cpp  etc. <- the filenames used to hold the above derived classes
  Plugin name: clevertool

  Enter a short description (typically one line)
  e.g. The clever plugin does clever stuff in QGIS
  Plugin description: The clever plugin does clever stuff in QGIS

  Enter a plugin category. Category will help users
  to understand where to find plugin. E.g. if plugin
  will be available from Vector menu category is Vector
  Plugin category: Vector Plugin
  Enter the name of the application menu that will be created for your plugin
  Clever Tools
  Menu name: Clever Tools

  Enter the name of the menu entry  (under the menu that you have just defined) that
  will be used to invoke your plugin. e.g. Clever Plugin
  Menu item name: Clever Plugin

  Summary of plugin parameters:
  ---------------------------------------------
  Plugin directory:          clever_plugin
  Name of the plugin:        clevertool
  Description of the plugin: The clever plugin does clever stuff in QGIS
  Category of the plugin:    Vector Plugin
  Menu name:                 PluginClever Tools
  Menu item name:            Clever Plugin

  Warning - Proceeding will make changes to CMakeLists.txt in this directory.
  Create the plugin? [y/n]: y
  Your plugin clevertool has been created in clever_plugin, CMakeLists.txt has been modified.

  Once your plugin has successfully built, please see clever_plugin/README for
  hints on how to get started.

Output from the generated README
................................

Welcome to your automatically generated plugin!

This is just a starting point. You now need to modify the code to make it do
something useful....read on for a more information to get yourself started.

Documentation:

You really need to read the QGIS API Documentation now at:

http://qgis.org/api/

In particular look at the following classes:

QGisInterface : http://qgis.org/api/classQgisInterface.html
QgsMapCanvas  : http://qgis.org/api/classQgsMapCanvas.html
QgsMapTool    : http://qgis.org/api/classQgsMapTool.html
QgisPlugin    : http://qgis.org/api/classQgisPlugin.html

QGisInterface is an abstract base class (ABC) that specifies what publicly
available features of QGIS are exposed to third party code and plugins. An
instance of the QgisInterface is passed to the plugin when it loads. Please
consult the QGIS development team if there is functionality required in the
QGisInterface that is not available.

QgsPlugin is an ABC that defines required behaviour your plugin must provide.
See below for more details.

What are all the files in my generated plugin directory for?

**CMakeLists.txt**

This is the generated CMake file that builds the plugin. You should add you
application specific dependencies and source files to this file.

**clevertool.h, clevertool.cpp**

This is the class that provides the 'glue' between your custom application
logic and the QGIS application. You will see that a number of methods are
already implemented for you - including some examples of how to add a raster or
vector layer to the main application map canvas. This class is a concrete
implementation of QgisPlugin (which defines required behaviour for a plugin).
In particular, a plugin has a number of static methods and members so that the
QgsPluginManager and plugin loader logic can identify each plugin, create an
appropriate menu entry for it etc. Note there is nothing stopping you creating
multiple toolbar icons and menu entries for a single plugin. By default though
a single menu entry and toolbar button is created and its pre-configured to
call the run() method in this class when selected. This default implementation
provided for you by the plugin builder is well documented, so please refer to
the code for further advice.

**clevertoolgui.ui**

This is a Qt designer 'ui' file. It defines the look of the default plugin
dialog without implementing any application logic. You can modify this form to
suite your needs or completely remove it if your plugin does not need to
display a user form (e.g. for custom MapTools).


**clevertoolgui.cpp, clevertoolgui.h**

This is the concrete class where application logic for the above mentioned
dialog should go. The world is your oyster here really....

**clevertool.qrc**

This is the Qt4 resources file for your plugin. The Makefile generated for your
plugin is all set up to compile the resource file so all you need to do is add
your additional icons etc using the simple xml file format. Note the namespace
used for all your resources e.g. (":/clevertool/"). It is important to use
this prefix for all your resources. We suggest you include any other images and
run time data in this resurce file too.

**clevertool.png**

This is the icon that will be used for your plugin menu entry and toolbar icon.
Simply replace this icon with your own icon to make your plugin disctinctive
from the rest.

**README**

This file contains the documentation you are reading now!


Getting developer help:

For Questions and Comments regarding the plugin builder template and creating
your features in QGIS using the plugin interface please contact us via:

* the QGIS developers mailing list, or
* IRC (#qgis on freenode.net)

QGIS is distributed under the Gnu Public License. If you create a useful plugin
please consider contributing it back to the community.

Have fun and thank you for choosing QGIS.

The QGIS Team
2007

Python Plugins
==============

The steps for developing Python plugins is covered extensively in the
`PyQGIS Cookbook`_.

.. _PyQGIS Cookbook: http://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/plugins.html
